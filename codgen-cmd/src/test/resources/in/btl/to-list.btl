package ${modulePackageName};

import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PositiveOrZero;

import org.hibernate.validator.constraints.Length;
import org.springframework.format.annotation.DateTimeFormat;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.EqualsAndHashCode;

/**
 * ${pojoMeta.remark}
 *
 * @codgen.generated 自动生成，如需修改，请删除本行
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@EqualsAndHashCode
@JsonInclude(Include.NON_NULL)
public class ${pojoMeta.className}ListTo implements Serializable {

	/**
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
	private static final long serialVersionUID = 1L;

	<%
		for(var i=0;i<pojoMeta.properties.~size;i++){
			// 查询列表时不会以主键为条件
			if(pojoMeta.properties[i].field.isPrimaryKey) continue;

        	println('/**');
        	println('* ' + pojoMeta.properties[i].remark);
        	println('*');
        	println('* @codgen.generated 自动生成，如需修改，请删除本行');
        	println('*/');
        	
	        // 如果是字符串且有长度限制，添加 @Length 注解
	        if (pojoMeta.properties[i].classSimpleName == 'String') {
	            if (pojoMeta.properties[i].field.scale > 0) {
	                println('@Length(max = ' + pojoMeta.properties[i].field.scale + ', message = "' + pojoMeta.properties[i].name + '的长度不能大于' + pojoMeta.properties[i].field.scale + '")');
	            }
	        }
	        // 如果是DateTime类型
	        else if (pojoMeta.properties[i].classSimpleName=='LocalDateTime' || (pojoMeta.properties[i].classSimpleName=='Date' && strutil.endWith(pojoMeta.properties[i].name,'DateTime'))) {
                println('@DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")');
                println('@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")');
	        }
	        // 如果是Date类型
	        else if (pojoMeta.properties[i].classSimpleName=='LocalDate' || (pojoMeta.properties[i].classSimpleName=='Date' && strutil.endWith(pojoMeta.properties[i].name,'Date'))) {
                println('@DateTimeFormat(pattern = "yyyy-MM-dd")');
                println('@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd", timezone = "GMT+8")');
	        }
	        // 如果是Time类型
	        else if (pojoMeta.properties[i].classSimpleName=='LocalTime' || (pojoMeta.properties[i].classSimpleName=='Date' && strutil.endWith(pojoMeta.properties[i].name,'Time'))) {
                println('@DateTimeFormat(pattern = "HH:mm:ss")');
                println('@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "HH:mm:ss", timezone = "GMT+8")');
	        }

	        // 如果是无符号类型，添加 @Min(...) 符号，限制为非负数
	        if (pojoMeta.properties[i].field.isUnsigned) {
	            println('@PositiveOrZero(message = "' + pojoMeta.properties[i].name + '不能为负数")');
	        }
	        
	        println('private ' + pojoMeta.properties[i].classSimpleName + ' ' + pojoMeta.properties[i].name + ';');
		}
	%>
	
}