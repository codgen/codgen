/**
<%
    for(remark in pojoMeta.remarks) {
        println(' * ' + remark);
    }
%>
 */
export interface ${moduleClassName} {
<%
    for(property in pojoMeta.properties) {
        println('/**');
        for(remark in property.remarks) {
            println(' * ' + remark);
        }
        println('*/');
        println(property.name + ':' + property.jsType + ';');
    }

    // 如果有外键，生成主键表的字段
    var<String> pkTableNames = [];
    for (foreignKey in pojoMeta.table.foreignKeys) {
        // 主键表名
        var pkTableName = foreignKey.pkTableName;
        // 判断是否已重复获取主键表
        if (array.contain(pkTableNames, pkTableName)) continue;
        // 遍历所有pojo，获取主键表
        for (pojo in pojoMetas) {
            if (pojo.table.name == pkTableName) {
                // 先添加进主键表列表，以供判断是否已重复获取主键表
                array.add(pkTableNames, pkTableName);
                // 遍历主键表pojo的所有属性
                for (property in pojo.properties) {
                    // 如果字段不是主键且是关键字，关联过来
                    if (!property.field.isPrimaryKey && property.isKeyWord) {
                        println('/**');
                        for(remark in property.remarks) {
                        if (remarkLP.first)
                            // 关联过来的字段标题前面要加上主键表标题
                            println(' * ' + pojo.title + remark);
                        else
                            println(' * ' + remark);
                        }
                        println('*');
                        println('*/');
                        println(property.alias + ':' + property.jsType + ';');
                    }
                }
                break;
            }
        }
    }
%>
}