package ${modulePackageName};

import ${packageName}.dic.*;

import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PositiveOrZero;

import org.hibernate.validator.constraints.Length;
import org.springframework.format.annotation.DateTimeFormat;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.Data;

/**
 * ${pojoMeta.title}修改方法的传输参数
 *
 * @codgen.generated 自动生成，如需修改，请删除本行
 */
@Data
@JsonInclude(Include.NON_NULL)
public class ${pojoMeta.className}ModifyTo implements Serializable {

	/**
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
	private static final long serialVersionUID = 1L;

	<%
		for(var i=0;i<pojoMeta.properties.~size;i++){
		    var property = pojoMeta.properties[i];
			// 修改时创建时间戳和修改时间戳不用填
			if(property.name=="createTimestamp") continue;
			if(property.name=="updateTimestamp") continue;

        	println('/**');
            for(remark in property.remarks) {
        	    println(' * ' + remark);
            }
        	println('*');
        	println('* @codgen.generated 自动生成，如需修改，请删除本行');
        	println('*/');
        	
	        // 如果是关键字段
	        if(property.field.isPrimaryKey) {
                // 如果是字符串类型，添加 @NotBlank 注解
	            if (property.classSimpleName == 'String') {
	                println('@NotBlank(message = "' + property.name + '不能为空")');
	            }
	            // 如果是非字符串类型，添加 @NotNull 注解
	            else {
	                println('@NotNull(message = "' + property.name + '不能为空")');
	            }
	        }

	        // 如果是字符串且有长度限制，添加 @Length 注解
	        if (property.classSimpleName == 'String') {
	            if (property.field.scale > 0) {
	                println('@Length(max = ' + property.field.scale + ', message = "' + property.name + '的长度不能大于' + property.field.scale + '")');
	            }
	        }
	        // 如果是DateTime类型
	        else if (property.classSimpleName=='LocalDateTime' || (property.classSimpleName=='Date' && strutil.endWith(property.name,'DateTime'))) {
                println('@DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")');
                println('@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")');
	        }
	        // 如果是Date类型
	        else if (property.classSimpleName=='LocalDate' || (property.classSimpleName=='Date' && strutil.endWith(property.name,'Date'))) {
                println('@DateTimeFormat(pattern = "yyyy-MM-dd")');
                println('@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd", timezone = "GMT+8")');
	        }
	        // 如果是Time类型
	        else if (property.classSimpleName=='LocalTime' || (property.classSimpleName=='Date' && strutil.endWith(property.name,'Time'))) {
                println('@DateTimeFormat(pattern = "HH:mm:ss")');
                println('@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "HH:mm:ss", timezone = "GMT+8")');
	        }

	        // 如果是无符号类型，添加 @PositiveOrZero 符号，限制为非负数
	        if (property.field.isUnsigned && !strutil.endWith(property.name,'Dic')) {
	            println('@PositiveOrZero(message = "' + property.name + '不能为负数")');
	        }
	        
	        var propertyClassName = strutil.endWith(property.name,'Dic')?capitalize(property.name):property.classSimpleName;
	        println('private ' + propertyClassName + ' ' + property.name + ';');
		}
	%>
	
}