package ${modulePackageName};

import java.util.Date;
import java.util.List;
import java.util.Map;

import jakarta.annotation.Resource;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Mono;

import rebue.robotech.clone.MapStructMapper;
import rebue.wheel.svc.dic.ResultDic;
import rebue.wheel.api.ra.IdRa;
import rebue.wheel.api.ra.BooleanRa;
import rebue.wheel.api.ra.PageRa;
import rebue.wheel.api.ro.Rt;

import ${packageName}.vo.${pojoMeta.className}Vo;
import ${packageName}.to.${pojoMeta.className}AddTo;
import ${packageName}.to.${pojoMeta.className}ModifyTo;
import ${packageName}.to.${pojoMeta.className}OneTo;
import ${packageName}.to.${pojoMeta.className}PageTo;
import ${packageName}.svc.${pojoMeta.className}Svc;

/**
 * ${pojoMeta.title}的控制器
 *
 * @codgen.generated 自动生成的注释，如需修改本注释，请删除本行
 */
@RestController
public class ${moduleClassName} {
    /**
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @Resource
    private ${pojoMeta.className}Svc svc;

    /**
     * 添加${pojoMeta.title}
     *
     * @param to 添加的具体信息
     *
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @PostMapping("/${project}/${pojoMeta.lowerHyphenNameWithoutPrefix}")
    public Mono<Rt<IdRa<${pojoMeta.ids[0].classSimpleName}>>> add(@RequestBody final ${pojoMeta.className}AddTo to) {
        return Mono.create(callback -> callback.success(Rt.success("添加成功", new IdRa<>(svc.add(to).getId()))));
    }

    /**
     * 修改${pojoMeta.title}的信息
     *
     * @param to 修改的具体数据
     *
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @PutMapping("/${project}/${pojoMeta.lowerHyphenNameWithoutPrefix}")
    public Mono<Rt<?>> modify(@RequestBody final ${pojoMeta.className}ModifyTo to) {
        return Mono.create(callback -> {
            svc.modifyById(to);
            callback.success(Rt.success("修改成功"));
        });
    }

    /**
     * 删除${pojoMeta.title}
     *
     * @param ${pojoMeta.ids[0].name} ${pojoMeta.title}ID
     * 
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @DeleteMapping("/${project}/${pojoMeta.lowerHyphenNameWithoutPrefix}")
    public Mono<Rt<?>> delById(@RequestParam("${pojoMeta.ids[0].name}") final ${pojoMeta.ids[0].classSimpleName} ${pojoMeta.ids[0].name}) {
		return Mono.create(callback -> {
		    svc.delById(${pojoMeta.ids[0].name});
		    callback.success(Rt.success("删除成功"));
        });
    }

    /**
     * 通过条件获取单个${pojoMeta.title}的信息
     *
     * @param qc 查询单个{pojoMeta.title}的具体条件$
     * XXX 注意qc参数不能加上@RequestParam注解，否则接收请求时会报ConversionNotSupportedException异常
     *
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @GetMapping("/${project}/${pojoMeta.lowerHyphenNameWithoutPrefix}/get-one")
    public Mono<Rt<${pojoMeta.className}Vo>> getOne(final ${pojoMeta.className}OneTo qc) {
        return Mono.create(callback -> callback.success(Rt.success("查询成功", svc.getOne(qc))));
    }

    /**
     * 通过ID获取单个${pojoMeta.title}的信息
     *
     * @param ${pojoMeta.ids[0].name} ${pojoMeta.title}ID
     * 
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @GetMapping("/${project}/${pojoMeta.lowerHyphenNameWithoutPrefix}/get-by-id")
    public Mono<Rt<${pojoMeta.className}Vo>> getById(@RequestParam("${pojoMeta.ids[0].name}") final ${pojoMeta.ids[0].classSimpleName} ${pojoMeta.ids[0].name}) {
        return Mono.create(callback -> callback.success(Rt.success("查询成功", svc.getById(${pojoMeta.ids[0].name}))));
    }

    /**
     * 判断${pojoMeta.title}是否存在
     *
     * @param ${pojoMeta.ids[0].name} ${pojoMeta.title}ID
     * 
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @GetMapping("/${project}/${pojoMeta.lowerHyphenNameWithoutPrefix}/exist-by-id")
    public Mono<Rt<BooleanRa>> existById(@RequestParam("${pojoMeta.ids[0].name}") final ${pojoMeta.ids[0].classSimpleName} ${pojoMeta.ids[0].name}) {
        return Mono.create(callback -> callback.success(Rt.success("查询成功", new BooleanRa(svc.existById(${pojoMeta.ids[0].name})))));
    }

    /**
     * 分页查询${pojoMeta.title}的信息
     *
     * @param qc 查询的具体条件
     * XXX 注意qc参数不能加上@RequestParam注解，否则接收请求时会报ConversionNotSupportedException异常
     *
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @GetMapping("/${project}/${pojoMeta.lowerHyphenNameWithoutPrefix}/page")
    public Mono<Rt<PageRa<${pojoMeta.className}Vo>>> page(final ${pojoMeta.className}PageTo qc) {
        return Mono.create(callback -> callback.success(Rt.success("分页查询成功", svc.page(qc))));
    }

    /**
     * 通过条件获取单个${pojoMeta.title}的信息
     *
     * @param qc 查询单个{pojoMeta.title}的具体条件$
     *
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @GetMapping("/${project}/${pojoMeta.lowerHyphenNameWithoutPrefix}/search-one")
    public Mono<Rt<${pojoMeta.className}Vo>> searchOne(@RequestParam Map<String, Object> qc) {
        return Mono.create(callback -> callback.success(Rt.success("查询成功", svc.beanSearchOne(qc))));
    }

    /**
     * 通过ID获取单个${pojoMeta.title}的信息
     *
     * @param ${pojoMeta.ids[0].name} ${pojoMeta.title}ID
     *
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @GetMapping("/${project}/${pojoMeta.lowerHyphenNameWithoutPrefix}/search-by-id")
    public Mono<Rt<${pojoMeta.className}Vo>> searchById(@RequestParam("${pojoMeta.ids[0].name}") final ${pojoMeta.ids[0].classSimpleName} ${pojoMeta.ids[0].name}) {
        return Mono.create(callback -> {
            Map<String, Object> qc = Map.of("${pojoMeta.ids[0].name}", ${pojoMeta.ids[0].name});
            callback.success(Rt.success("查询成功", svc.beanSearchOne(qc)));
        });
    }

    /**
     * 分页搜索${pojoMeta.title}的信息
     *
     * @param qc 查询的具体条件
     *
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @GetMapping("/${project}/${pojoMeta.lowerHyphenNameWithoutPrefix}/search")
    public Mono<Rt<PageRa<${pojoMeta.className}Vo>>> search(@RequestParam Map<String, Object> qc) {
        return Mono.create(callback -> callback.success(Rt.success("分页查询成功", svc.beanSearch(qc))));
    }

}
