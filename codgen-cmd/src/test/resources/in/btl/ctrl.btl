package @{modulePackageName};

import java.util.Date;
import java.util.List;

import jakarta.annotation.Resource;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Mono;

import @{packageName}.mo.@{pojoMeta.className}Mo;
import @{packageName}.to.@{pojoMeta.className}AddTo;
import @{packageName}.to.@{pojoMeta.className}ModifyTo;
import @{packageName}.to.@{pojoMeta.className}OneTo;
import @{packageName}.to.@{pojoMeta.className}PageTo;
import @{packageName}.svc.@{pojoMeta.className}Svc;

import rebue.robotech.clone.MapStructMapper;
import rebue.wheel.svc.dic.ResultDic;
import rebue.wheel.api.ra.IdRa;
import rebue.wheel.api.ra.BooleanRa;
import rebue.wheel.api.ra.PageRa;
import rebue.wheel.api.ro.Rt;

/**
 * @{pojoMeta.remark}
 *
 * @codgen.generated 自动生成的注释，如需修改本注释，请删除本行
 */
@RestController
@RefreshScope
public class @{moduleClassName} {
    /**
     * 限制每页能查询的大小
     *
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @Value("${rebue.limit-page-size.@{pojoMeta.lowerHyphenName}:100}")
    private Integer limitPageSize;

    /**
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @Resource
    private @{pojoMeta.className}Svc svc;

    /**
     * 添加@{pojoMeta.title}
     *
     * @param to 添加的具体信息
     *
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @PostMapping("/@{project}/@{pojoMeta.lowerHyphenNameWithoutPrefix}")
    public Mono<Rt<IdRa<@{pojoMeta.ids[0].classSimpleName}>>> add(@RequestBody final @{pojoMeta.className}AddTo to) {
        return Mono.create(callback -> callback.success(Rt.success("添加成功", new IdRa<>(svc.add(to).getId()))));
    }

    /**
     * 修改@{pojoMeta.title}的信息
     *
     * @param to 修改的具体数据
     *
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @PutMapping("/@{project}/@{pojoMeta.lowerHyphenNameWithoutPrefix}")
    public Mono<Rt<?>> modify(@RequestBody final @{pojoMeta.className}ModifyTo to) {
        return Mono.create(callback -> {
            svc.modifyById(to);
            callback.success(Rt.success("修改成功"));
        });
    }

    /**
     * 删除@{pojoMeta.title}
     *
     * @param @{pojoMeta.ids[0].name} @{pojoMeta.title}ID
     * 
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @DeleteMapping("/@{project}/@{pojoMeta.lowerHyphenNameWithoutPrefix}")
    public Mono<Rt<?>> delById(@RequestParam("@{pojoMeta.ids[0].name}") final @{pojoMeta.ids[0].classSimpleName} @{pojoMeta.ids[0].name}) {
		return Mono.create(callback -> {
		    svc.delById(@{pojoMeta.ids[0].name});
		    callback.success(Rt.success("删除成功"));
        });
    }

    /**
     * 通过条件获取单个@{pojoMeta.title}的信息
     *
     * @param qc 查询单个{pojoMeta.title}的具体条件$
     * 
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @GetMapping("/@{project}/@{pojoMeta.lowerHyphenNameWithoutPrefix}/get-one")
    public Mono<Rt<@{pojoMeta.className}Mo>> getOne(final @{pojoMeta.className}OneTo qc) {
        return Mono.create(callback -> callback.success(Rt.success("查询成功", svc.getOne(qc))));
    }

    /**
     * 通过ID获取单个@{pojoMeta.title}的信息
     *
     * @param @{pojoMeta.ids[0].name} @{pojoMeta.title}ID
     * 
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @GetMapping("/@{project}/@{pojoMeta.lowerHyphenNameWithoutPrefix}/get-by-id")
    public Mono<Rt<@{pojoMeta.className}Mo>> getById(@RequestParam("@{pojoMeta.ids[0].name}") final @{pojoMeta.ids[0].classSimpleName} @{pojoMeta.ids[0].name}) {
        return Mono.create(callback -> callback.success(Rt.success("查询成功", svc.getById(@{pojoMeta.ids[0].name}))));
    }

    /**
     * 判断@{pojoMeta.title}是否存在
     *
     * @param @{pojoMeta.ids[0].name} @{pojoMeta.title}ID
     * 
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @GetMapping("/@{project}/@{pojoMeta.lowerHyphenNameWithoutPrefix}/exist-by-id")
    public Mono<Rt<BooleanRa>> existById(@RequestParam("@{pojoMeta.ids[0].name}") final @{pojoMeta.ids[0].classSimpleName} @{pojoMeta.ids[0].name}) {
        return Mono.create(callback -> callback.success(Rt.success("查询成功", new BooleanRa(svc.existById(@{pojoMeta.ids[0].name})))));
    }

    /**
     * 查询@{pojoMeta.title}的信息
     *
     * @param qc 查询的具体条件
     *
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    @GetMapping("/@{project}/@{pojoMeta.lowerHyphenNameWithoutPrefix}/page")
    public Mono<Rt<?>> page(final @{pojoMeta.className}PageTo qc) {
        return Mono.create(callback -> {
            if (qc.getPageSize() != null && qc.getPageSize() > limitPageSize) {
                callback.error(new IllegalArgumentException("pageSize不能大于" + limitPageSize));
                return;
            }
            callback.success(Rt.success("分页查询成功", MapStructMapper.INSTANCE.pageInfoMapPageRa(svc.page(qc))));
        });
    }

}
