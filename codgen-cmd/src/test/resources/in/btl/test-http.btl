package ${modulePackageName};

import java.io.IOException;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;

import lombok.extern.slf4j.Slf4j;
import ${packageName}.mo.${pojoMeta.className}Mo;
import ${packageName}.to.${pojoMeta.className}AddTo;
import ${packageName}.to.${pojoMeta.className}ModifyTo;
import ${packageName}.clone.${pojoMeta.className}Clone;
import rebue.wheel.api.dic.ResultDic;
import rebue.wheel.api.ra.IdRa;
import rebue.wheel.api.ra.PageRa;
import rebue.wheel.api.ro.Rt;
import rebue.wheel.core.RandomEx;
import rebue.wheel.net.httpclient.HttpClient;
import rebue.wheel.net.httpclient.impl.OkHttpClientImpl;
import rebue.wheel.serialization.jackson.JacksonUtils;

/**
 * ${pojoMeta.remark} HTTP测试
 *
 * @codgen.generated 自动生成的注释，如需修改本注释，请删除本行
 */
@Slf4j
public class ${pojoMeta.className}HttpTests {

    /**
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
	private final String _hostUrl 			 = "http://127.0.0.1:${microServerPort}";

    /**
     * @codgen.generated 自动生成，如需修改，请删除本行
     */
    private final HttpClient   _httpClient   = new OkHttpClientImpl();

	/**
	 * 测试基本的增删改查
	 * 
	 * @codgen.generated 自动生成，如需修改，请删除本行
	 */
	@Test
	public void testCrud() throws IOException {
        ${pojoMeta.className}AddTo addTo = null;
        ${pojoMeta.ids[0].classSimpleName} id = null;
		for(int i=0;i<20;i++) {
            addTo = (${pojoMeta.className}AddTo) RandomEx.randomPojo(${pojoMeta.className}AddTo.class);
			log.info("添加${pojoMeta.remark}的参数为：" + addTo);
			final String addResult = _httpClient.postByJsonParams(_hostUrl + "/${project}/${pojoMeta.lowerHyphenNameWithoutPrefix}", addTo);
			log.info("添加${pojoMeta.remark}的返回值为：" + addResult);
            final Rt<IdRa<${pojoMeta.ids[0].classSimpleName}>> idRo = JacksonUtils.deserialize(addResult, new TypeReference<Rt<IdRa<${pojoMeta.ids[0].classSimpleName}>>>() {});
			log.info(idRo.toString());
        	Assertions.assertEquals(ResultDic.SUCCESS, idRo.getResult());
            id = idRo.getExtra().getId();
    	}
    	
		final String pageResult = _httpClient.get(_hostUrl + "/${project}/${pojoMeta.lowerHyphenNameWithoutPrefix}/page");
		log.info("查询${pojoMeta.remark}的返回列表为：" + pageResult);
		final Rt<PageRa<${pojoMeta.className}Mo>> pageRo = JacksonUtils.deserialize(pageResult, new TypeReference<Rt<PageRa<${pojoMeta.className}Mo>>>() {});
        Assertions.assertEquals(ResultDic.SUCCESS, pageRo.getResult());

		final String searchResult = _httpClient.get(_hostUrl + "/${project}/${pojoMeta.lowerHyphenNameWithoutPrefix}/search");
		log.info("搜索${pojoMeta.remark}的返回列表为：" + searchResult);
		final Rt<PageRa<${pojoMeta.className}Mo>> searchRo = JacksonUtils.deserialize(searchResult, new TypeReference<Rt<PageRa<${pojoMeta.className}Mo>>>() {});
        Assertions.assertEquals(ResultDic.SUCCESS, searchRo.getResult());

		log.info("获取单个${pojoMeta.remark}的参数为：" + id);
		final String getByIdResult = _httpClient.get(_hostUrl + "/${project}/${pojoMeta.lowerHyphenNameWithoutPrefix}/get-by-id?id=" + id);
		log.info("获取单个${pojoMeta.remark}的返回值为：" + getByIdResult);
		
        final ${pojoMeta.className}ModifyTo modifyTo = ${pojoMeta.className}Clone.INSTANCE.addToMapModifyTo(addTo);
        modifyTo.setId(id);
		log.info("修改${pojoMeta.remark}的参数为：" + modifyTo);
		final String modifyResult = _httpClient.putByJsonParams(_hostUrl + "/${project}/${pojoMeta.lowerHyphenNameWithoutPrefix}", modifyTo);
        final Rt<${pojoMeta.className}Mo> getByIdRo = JacksonUtils.deserialize(getByIdResult, new TypeReference<Rt<${pojoMeta.className}Mo>>() {
        });
        Assertions.assertEquals(ResultDic.SUCCESS, getByIdRo.getResult());
        ${pojoMeta.className}Mo mo = getByIdRo.getExtra();
        log.info("修改${pojoMeta.remark}的返回值为：" + modifyResult);
		final Rt<?> modifyRo = JacksonUtils.deserialize(modifyResult, Rt.class);
        Assertions.assertEquals(ResultDic.SUCCESS, modifyRo.getResult());

		log.info("删除${pojoMeta.remark}的参数为：" + mo.getId());
		final String deleteResult = _httpClient.delete(_hostUrl + "/${project}/${pojoMeta.lowerHyphenNameWithoutPrefix}?id=" + mo.getId());
		log.info("删除${pojoMeta.remark}的返回值为：" + deleteResult);
        final Rt<?> deleteRo = JacksonUtils.deserialize(deleteResult, Rt.class);
        log.info(deleteRo.toString());
        Assertions.assertEquals(ResultDic.SUCCESS, deleteRo.getResult());
	}
}
