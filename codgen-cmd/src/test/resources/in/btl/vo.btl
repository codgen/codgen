package ${modulePackageName};

import cn.zhxu.bs.bean.DbField;
import cn.zhxu.bs.bean.SearchBean;
import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.Data;
import rebue.robotech.vo.Vo;
import rebue.wheel.api.desensitize.Desensitize;
import rebue.wheel.api.desensitize.DesensitizeStrategy;

import java.time.LocalDateTime;

/**
 * ${pojoMeta.title}的视图对象
 *
 * @codgen.generated 自动生成，如需修改，请删除本行
 */
@Data
<%
    if (pojoMeta.table.foreignKeys.~size > 0) {
        var tables = pojoMeta.table.name + ' a';
        for (foreignKey in pojoMeta.table.foreignKeys) {
            tables += ' left join ' + foreignKey.pkTableName + ' ' + foreignKey.pkTableAlias;
            tables += ' on ' + 'a.' + foreignKey.fkFieldName + ' = ' + foreignKey.pkTableAlias + '.' + foreignKey.pkFieldName;
        }
        println('@SearchBean(tables="' + tables + '", autoMapTo="a")');
    }
%>
public class ${moduleClassName} implements Vo<${pojoMeta.ids[0].classSimpleName}> {
	<%
	    // 生成本表的字段
		for(var i=0; i<pojoMeta.properties.~size; i++) {
		    var property = pojoMeta.properties[i];
            println('/**');
            for(remark in property.remarks) {
        	    println(' * ' + remark);
            }
            println('*');
            println('* @codgen.generated 自动生成，如需修改，请删除本行');
            println('*/');
            if (property.isKey) {
                println('@JsonIgnore');
            }
            // 根据remark解析情况添加脱敏注解
            addDesensitizeAnnotation(property.remark);
            println('private ' + property.classSimpleName + ' ' + property.name + ';');
		}

        // 如果有外键，生成主键表的字段
        var<String> pkTableNames = [];
		for (foreignKey in pojoMeta.table.foreignKeys) {
            // 主键表名
            var pkTableName = foreignKey.pkTableName;
            // 判断是否已重复获取主键表
            if (array.contain(pkTableNames, pkTableName)) continue;
            // 遍历所有pojo，获取主键表
            for (pojo in pojoMetas) {
                if (pojo.table.name == pkTableName) {
                    // 先添加进主键表列表，以供判断是否已重复获取主键表
                    array.add(pkTableNames, pkTableName);
                    // 遍历主键表pojo的所有属性
                    for (property in pojo.properties) {
                        // 如果字段不是主键且是关键字，关联过来
                        if (!property.field.isPrimaryKey && property.isKeyWord) {
                            println('/**' + property.field.isPrimaryKey);
                            for(remark in property.remarks) {
                                if (remarkLP.first)
                                    // 关联过来的字段标题前面要加上主键表标题
                                    println(' * ' + pojo.title + remark);
                                else
                                    println(' * ' + remark);
                            }
                            println('*');
                            println('* @codgen.generated 自动生成，如需修改，请删除本行');
                            println('*/');
                            println('@DbField("' + foreignKey.pkTableAlias + '.' + property.field.name + '")');
                            // 根据remark解析情况添加脱敏注解
                            addDesensitizeAnnotation(property.remark);
                            println('private ' + property.classSimpleName + ' ' + property.alias + ';');
                        }
                    }
                    break;
                }
            }
		}
	%>
}