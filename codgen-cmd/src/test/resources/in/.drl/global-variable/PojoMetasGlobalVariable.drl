package globalvariable;

import java.util.Map;
import java.util.HashMap;
import java.util.LinkedHashMap;
import com.github.codgen.core.drools.fact.GlobalVariableFact;
import rebue.wheel.serialization.jackson.JacksonUtils;
import rebue.wheel.core.db.meta.DbMeta;
import rebue.wheel.core.db.JdbcUtils;
import rebue.wheel.core.db.meta.PojoMeta;
import java.util.List;

/**
 * 根据dbMeta的内容转换成package的内容放入变量中(执行的优先级要比dbMeta规则的小)
 */
rule global_variable_pojo_metas
    agenda-group "global-variable"  // 议程分组
    no-loop true                    // 防止死循环(当规则通过update之类的函数修改了Fact对象时，可能使当前规则再次被激活从而导致死循环)
    lock-on-active true             // 限制当前规则只会被执行一次(包括当前规则的重复执行不是本身触发的)
    salience 1                      // 执行的优先级(值越大优先级越高，可以为负数，不设置默认为0)
when
    $variableFact: GlobalVariableFact()
then
    // 变量的key
    final String POJO_METAS_GLOBAL_VARIABLE_KEY = "pojoMetas";
    Map<String, Object> variableMap = (Map<String, Object>)$variableFact.getVariableMap();
    DbMeta dbMeta = (DbMeta)variableMap.get("dbMeta");
    List<PojoMeta> pojoMetas = JdbcUtils.dbMetaToPojoMetas(dbMeta);
    System.out.printf("pojo metas: %s%n", JacksonUtils.serializeWithPretty(pojoMetas));
    variableMap.put(POJO_METAS_GLOBAL_VARIABLE_KEY, pojoMetas);
    update($variableFact);
end