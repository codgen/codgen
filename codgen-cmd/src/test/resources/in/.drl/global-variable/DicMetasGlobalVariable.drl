package globalvariable;

import java.util.Map;
import java.util.HashMap;
import java.util.LinkedHashMap;
import io.github.codgen.core.drools.fact.GlobalVariableFact;
import rebue.wheel.serialization.jackson.JacksonUtils;
import rebue.wheel.core.db.JdbcUtils;
import rebue.wheel.core.db.meta.DbMeta;
import rebue.wheel.core.db.meta.DicMeta;
import rebue.wheel.core.db.meta.PojoMeta;
import java.util.List;
import java.util.Set;

/**
 * 根据pojoMetas的内容获取字典类的内容放入变量中(执行的优先级要比 global_variable_pojo_metas 规则的小)
 */
rule global_variable_dic_metas
    agenda-group "global-variable"  // 议程分组
    no-loop true                    // 防止死循环(当规则通过update之类的函数修改了Fact对象时，可能使当前规则再次被激活从而导致死循环)
    lock-on-active true             // 限制当前规则只会被执行一次(包括当前规则的重复执行不是本身触发的)
    salience 1                      // 执行的优先级(值越大优先级越高，可以为负数，不设置默认为0)
when
    $variableFact: GlobalVariableFact()
then
    // 变量的key
    final String POJO_METAS_GLOBAL_VARIABLE_KEY = "pojoMetas";
    final String DIC_METAS_GLOBAL_VARIABLE_KEY = "dicMetas";
    Map<String, Object> variableMap = (Map<String, Object>)$variableFact.getVariableMap();
    List<PojoMeta> pojoMetas = (List<PojoMeta>)variableMap.get(POJO_METAS_GLOBAL_VARIABLE_KEY);
    Set<DicMeta> dicMetas = JdbcUtils.getDicMetasFromPojoMetas(pojoMetas);
    System.out.printf("dic metas: %s%n", JacksonUtils.serializeWithPretty(dicMetas));
    variableMap.put(DIC_METAS_GLOBAL_VARIABLE_KEY, dicMetas);
    update($variableFact);
end