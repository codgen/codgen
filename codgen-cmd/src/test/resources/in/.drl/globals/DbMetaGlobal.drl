package globals;

import java.util.Map;
import java.util.HashMap;
import com.github.codgen.core.drools.fact.BindingsFact;
import com.github.codgen.core.drools.fact.GlobalFact;
import rebue.wheel.core.JdbcUtils;
import rebue.wheel.serialization.jackson.JacksonUtils;

declare JdbcOptions
  connect : JdbcUtils.ConnectParam
  tableName : String
end

/**
 * 读取数据库信息
 */
rule readDbMatas
    agenda-group "globals"
    no-loop true            // 防止死循环(当规则通过update之类的函数修改了Fact对象时，可能使当前规则再次被激活从而导致死循环)
    lock-on-active true     // 限制当前规则只会被执行一次(包括当前规则的重复执行不是本身触发的)
when
    $globalFact: GlobalFact($globals: globals, $globalOptions: globalOptions)
then
    @SuppressWarnings("unchecked")
    Map<String, ?> jdbcMap = (Map<String, ?>) $globalOptions.get("jdbc");
    System.out.printf("readDbMatas: %s(%s)%n", jdbcMap, jdbcMap.getClass().getName());

    // 读取数据库信息
    Map<String, JdbcUtils.DbMeta> dbMetas = new HashMap<>();
    if (jdbcMap != null && !jdbcMap.isEmpty()) {
        for (Map.Entry<String, ?> jdbc : jdbcMap.entrySet()) {
            // 利用jackson将jdbc选项转换成JdbcOptions对象
            JdbcOptions jdbcOptions = JacksonUtils.getObjectMapper().convertValue(jdbc.getValue(), JdbcOptions.class);
            JdbcUtils.DbMeta dbMeta = JdbcUtils.getDbMeta(jdbcOptions.getConnect(), jdbcOptions.getTableName());
            dbMetas.put(jdbc.getKey(), dbMeta);
        }
    }
    System.out.printf("database meta: %s%n", JacksonUtils.serializeWithPretty(dbMetas));

    $globals.put("dbMetas", dbMetas);
    update($globalFact);
end

///**
// * 注入数据库信息
// */
//rule injectDbMatas
//    agenda-group "bindings"
//    no-loop true            // 防止死循环(当规则通过update之类的函数修改了Fact对象时，可能使当前规则再次被激活从而导致死循环)
//    lock-on-active true     // 限制当前规则只会被执行一次(包括当前规则的重复执行不是本身触发的)
//when
//    $bindingsFact: BindingsFact($globals: globals, $globalOptions: globalOptions)
//    $globalFact: GlobalFact($globals: globals, $globalOptions: globalOptions)
//then
//    Map<String, ?> jdbcMap = (Map<String, ?>) $globalOptions.get("jdbc");
//    System.out.printf("readDbMatas: %s(%s)%n", jdbcMap, jdbcMap.getClass().getName());
//
//    // 读取数据库信息
//    Map<String, JdbcUtils.DbMeta> dbMetas = new HashMap<>();
//    if (jdbcMap != null && !jdbcMap.isEmpty()) {
//        for (Map.Entry<String, ?> jdbc : jdbcMap.entrySet()) {
//            // 利用jackson将jdbc选项转换成JdbcOptions对象
//            JdbcOptions jdbcOptions = JacksonUtils.getObjectMapper().convertValue(jdbc.getValue(), JdbcOptions.class);
//            JdbcUtils.DbMeta dbMeta = JdbcUtils.getDbMeta(jdbcOptions.getConnect(), jdbcOptions.getTableName());
//            dbMetas.put(jdbc.getKey(), dbMeta);
//        }
//    }
//    System.out.printf("database meta: %s%n", JacksonUtils.serializeWithPretty(dbMetas));
//
//    $globals.put("dbMetas", dbMetas);
//    update($bindingsFact);
//end