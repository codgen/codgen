# groupTemplate的配置选项(生成template时使用)
# 如果未配置default，会自动创建一个default配置
groupTemplate:
  default:
    FN.getCommentOfRemarks: rebue.wheel.core.beetl.function.GetCommentOfRemarksFunction
  # 与Spring表达式语言不冲突的配置
  spel:
    # 左定位符
    DELIMITER_PLACEHOLDER_START: '@{'
    # 右定位符
    DELIMITER_PLACEHOLDER_END: '}'
    FN.getCommentOfRemarks: rebue.wheel.core.beetl.function.GetCommentOfRemarksFunction
# 模板要绑定全局变量的配置选项
globalVariable:
  default:
    # 项目名称
    project: abc
    # 模块名称
    artifact: codgen-abc
    # 版本
    version: 1.0.0
    # 包名(根据packageName可自动计算包路径packagePath)
    packageName: io.github.codgen
    # 微服务端口
    microServerPort: 0000
  # 数据库信息的配置选项
  dbMeta:
    connect:
      # 数据库连接字符串(MySQL5要想获取表的注释，必须设置useInformationSchema=true，据说8可以不设置)
      url: jdbc:mysql://%s:%s/%s?useInformationSchema=true
      # 数据库连接字符串要插入的参数
      params:
        # 主机地址
        - 127.0.0.1
        # 端口号
        - 3306
        # 数据库名称
        - test
      # 数据库的连接属性
      properties:
        # 用户名
        user: test
        # 密码
        password: test
    # 表名过滤的模式(不设置则获取所有的表)
    tableName: TEST_A%
# 获取模板的配置选项
template:
  # 分组模板
  groupTemplate:
    # 使用用了Spring表达式语言的文件
    spel:
      - btl/svc-impl.btl
  # 配置模板触发的规则(不配置的默认触发template_default规则)
  rule:
    # PojoTemplate规则的配置选项
    #     值是Map列表，程序会将其中的每一项绑定到模板中
    pojo:
      - moduleName: vo # 模块名(根据moduleName自动计算modulePackageName为packageName+'.'+moduleName，然后计算出modulePath)
        inFilePath: btl/vo.btl
        outFilePath: ${project}-api/src/main/java/${modulePath}/${moduleClassName}.java
      - moduleName: api # 模块名(根据moduleName自动计算modulePackageName为packageName+'.'+moduleName，然后计算出modulePath)
        inFilePath: btl/api.btl
        outFilePath: ${project}-api/src/main/java/${modulePath}/${moduleClassName}.java
      - moduleName: clone # 模块名(根据moduleName自动计算modulePackageName为packageName+'.'+moduleName，然后计算出modulePath)
        inFilePath: btl/clone.btl
        outFilePath: ${project}-svr/src/main/java/${modulePath}/${moduleClassName}.java
      - moduleName: ctrl # 模块名(根据moduleName自动计算modulePackageName为packageName+'.'+moduleName，然后计算出modulePath)
        inFilePath: btl/ctrl.btl
        outFilePath: ${project}-svr/src/main/java/${modulePath}/${moduleClassName}.java
      - moduleName: svc # 模块名(根据moduleName自动计算modulePackageName为packageName+'.'+moduleName，然后计算出modulePath)
        inFilePath: btl/svc.btl
        outFilePath: ${project}-svr/src/main/java/${modulePath}/${moduleClassName}.java
      - moduleName: svc.impl # 模块名(根据moduleName自动计算modulePackageName为packageName+'.'+moduleName，然后计算出modulePath)
        inFilePath: btl/svc-impl.btl
        outFilePath: ${project}-svr/src/main/java/${modulePath}/${moduleClassName}.java
      - moduleName: test.api # 模块名(根据moduleName自动计算modulePackageName为packageName+'.'+moduleName，然后计算出modulePath)
        inFilePath: btl/test-api.btl
        outFilePath: ${project}-svr/src/test/java/${modulePath}/${pojoMeta.className}ApiTests.java
      - moduleName: test.http # 模块名(根据moduleName自动计算modulePackageName为packageName+'.'+moduleName，然后计算出modulePath)
        inFilePath: btl/test-http.btl
        outFilePath: ${project}-svr/src/test/java/${modulePath}/${pojoMeta.className}HttpTests.java
      - moduleName: test.svc # 模块名(根据moduleName自动计算modulePackageName为packageName+'.'+moduleName，然后计算出modulePath)
        inFilePath: btl/test-svc.btl
        outFilePath: ${project}-svr/src/test/java/${modulePath}/${pojoMeta.className}SvcTests.java
      - moduleName: to # 模块名(根据moduleName自动计算modulePackageName为packageName+'.'+moduleName，然后计算出modulePath)
        inFilePath: btl/to-add.btl
        outFilePath: ${project}-api/src/main/java/${modulePath}/${pojoMeta.className}AddTo.java
      - moduleName: to # 模块名(根据moduleName自动计算modulePackageName为packageName+'.'+moduleName，然后计算出modulePath)
        inFilePath: btl/to-del.btl
        outFilePath: ${project}-api/src/main/java/${modulePath}/${pojoMeta.className}DelTo.java
      - moduleName: to # 模块名(根据moduleName自动计算modulePackageName为packageName+'.'+moduleName，然后计算出modulePath)
        inFilePath: btl/to-list.btl
        outFilePath: ${project}-api/src/main/java/${modulePath}/${pojoMeta.className}ListTo.java
      - moduleName: to # 模块名(根据moduleName自动计算modulePackageName为packageName+'.'+moduleName，然后计算出modulePath)
        inFilePath: btl/to-modify.btl
        outFilePath: ${project}-api/src/main/java/${modulePath}/${pojoMeta.className}ModifyTo.java
      - moduleName: to # 模块名(根据moduleName自动计算modulePackageName为packageName+'.'+moduleName，然后计算出modulePath)
        inFilePath: btl/to-one.btl
        outFilePath: ${project}-api/src/main/java/${modulePath}/${pojoMeta.className}OneTo.java
      - moduleName: to # 模块名(根据moduleName自动计算modulePackageName为packageName+'.'+moduleName，然后计算出modulePath)
        inFilePath: btl/to-page.btl
        outFilePath: ${project}-api/src/main/java/${modulePath}/${pojoMeta.className}PageTo.java
      - moduleName: mo
        inFilePath: btl/jsmo.btl
        outFilePath: ${project}-web/src/mo/${project}/${pojoMeta.className}Mo.ts
        # 模块名(根据moduleName自动计算modulePackageName为packageName+'.'+module，然后计算出modulePath)
      - inFilePath: btl/jsmng.btl
        outFilePath: ${project}-web/src/view/${project}/${pojoMeta.lowerHyphenNameWithoutPrefix}/${pojoMeta.className}Mng.vue
